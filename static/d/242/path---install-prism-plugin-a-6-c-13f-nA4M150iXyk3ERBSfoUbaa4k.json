{"data":{"markdownRemark":{"html":"<h1>Install Prism Plugin</h1>\n<p>Prism is a lightweight, extensible syntax highlighter. Gatsby JS comes with a well integrated <a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/?=\">plugin</a>. Follow the instruction then you can render code snippets in a nice looking way. </p>\n<p>Here is an example. The follwing markdown </p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\">\n      <pre class=\"language-markdown\"><code class=\"language-markdown\">```javascript\n// In your gatsby-config.js\nplugins: [\n  {\n<span class=\"token code keyword\">    resolve: `gatsby-transformer-remark`,</span>\n<span class=\"token code keyword\">    options: {</span>\n<span class=\"token code keyword\">      plugins: [</span>\n<span class=\"token code keyword\">        `gatsby-remark-prismjs`,</span>\n<span class=\"token code keyword\">      ]</span>\n<span class=\"token code keyword\">    }</span>\n  }\n]</code></pre>\n      </div>\n<p>will become</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// In your gatsby-config.js</span>\nplugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`gatsby-transformer-remark`</span></span><span class=\"token punctuation\">,</span>\n    options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token template-string\"><span class=\"token string\">`gatsby-remark-prismjs`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre>\n      </div>","frontmatter":{"date":"August 23, 2018","path":"/install-prism-plugin","tags":["gatsbyjs","prismjs"],"title":"Install Prism Plugin"}}},"pageContext":{"prev":null,"next":{"excerpt":"Feature Toggle And Regression It is OK to violate DRY principls to copy the code when working on a new feature that is high couple to old behaviour. As a professional software engineer, I kind of strickly obey the DRY principals, and don't want toâ€¦","html":"<h1>Feature Toggle And Regression</h1>\n<p>It is OK to violate DRY principls to copy the code when working on a new feature that is high couple to old behaviour.</p>\n<p>As a professional software engineer, I kind of strickly obey the DRY principals, and don't want to introduce any regression. This ends up you can not easily to write a clean code and refacotr. You need to branch your code in the exisitng code base. </p>\n<p>Copy the exisitng code will ease your regresion nightmare. Once toggle is removed, the old code will disappear, so you are not violating DRY prinsipal any more. But you need to make sure the toggle will be removed and old behaviour will not needed. Otherwise, you could put yourself in a situation that DRY try to address, maintain multiple codes that basically indentical.</p>","id":"a6ffd3ea-158f-5901-9195-a5e8e85f91cd","timeToRead":1,"frontmatter":{"date":"2018-08-09T21:12:26.441Z","path":"/feature-toggle-and-regression","tags":["dry","feature-toogle","regression"],"title":"Feature Toggle And Regression"}}}}