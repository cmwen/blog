{"data":{"markdownRemark":{"html":"<h1>Feature Toggle And Regression</h1>\n<p>It is OK to violate DRY principls to copy the code when working on a new feature that is high couple to old behaviour.</p>\n<p>As a professional software engineer, I kind of strickly obey the DRY principals, and don't want to introduce any regression. This ends up you can not easily to write a clean code and refacotr. You need to branch your code in the exisitng code base. </p>\n<p>Copy the exisitng code will ease your regresion nightmare. Once toggle is removed, the old code will disappear, so you are not violating DRY prinsipal any more. But you need to make sure the toggle will be removed and old behaviour will not needed. Otherwise, you could put yourself in a situation that DRY try to address, maintain multiple codes that basically indentical.</p>","frontmatter":{"date":"August 09, 2018","path":"/feature-toggle-and-regression","tags":["dry","feature-toogle","regression"],"title":"Feature Toggle And Regression"}}},"pageContext":{"prev":null,"next":{"excerpt":"Looking At The Root Problem Example, the translation fallback logic in the code. Using the webpack plugin only took me few hours. But the on going cost of adding and removing fallback logic is uncountable. Shell service gave us some crapy API, and weâ€¦","html":"<h1>Looking At The Root Problem</h1>\n<p>Example, the translation fallback logic in the code. Using the webpack plugin only took me few hours. But the on going cost of adding and removing fallback logic is uncountable.</p>\n<p>Shell service gave us some crapy API, and we keep hitting some issue that is not quite relavent but we have to cope with it. This should be address and fixed at the source level.</p>","id":"8ce038d2-ed07-51a7-a98d-7ffcf5a693b1","timeToRead":1,"frontmatter":{"date":"2018-08-09T06:34:51.232Z","path":"/looking-at-the-root-problem","tags":["pratice"],"title":"Looking At The Root Problem"}}}}