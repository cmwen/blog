{"data":{"markdownRemark":{"html":"<h1>Looking At The Root Problem</h1>\n<p>Example, the translation fallback logic in the code. Using the webpack plugin only took me few hours. But the on going cost of adding and removing fallback logic is uncountable.</p>\n<p>Shell service gave us some crapy API, and we keep hitting some issue that is not quite relavent but we have to cope with it. This should be address and fixed at the source level.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\">\n      <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> something <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","frontmatter":{"date":"August 09, 2018","path":"/looking-at-the-root-problem","tags":["pratice"],"title":"Looking At The Root Problem"}}},"pageContext":{"prev":{"excerpt":"Feature Toggle And Regression It is OK to violate DRY principls to copy the code when working on a new feature that is high couple to old behaviour. As a professional software engineer, I kind of strickly obey the DRY principals, and don't want to…","html":"<h1>Feature Toggle And Regression</h1>\n<p>It is OK to violate DRY principls to copy the code when working on a new feature that is high couple to old behaviour.</p>\n<p>As a professional software engineer, I kind of strickly obey the DRY principals, and don't want to introduce any regression. This ends up you can not easily to write a clean code and refacotr. You need to branch your code in the exisitng code base. </p>\n<p>Copy the exisitng code will ease your regresion nightmare. Once toggle is removed, the old code will disappear, so you are not violating DRY prinsipal any more. But you need to make sure the toggle will be removed and old behaviour will not needed. Otherwise, you could put yourself in a situation that DRY try to address, maintain multiple codes that basically indentical.</p>","id":"a6ffd3ea-158f-5901-9195-a5e8e85f91cd","timeToRead":1,"frontmatter":{"date":"2018-08-09T21:12:26.441Z","path":"/feature-toggle-and-regression","tags":["dry","feature-toogle","regression"],"title":"Feature Toggle And Regression"}},"next":{"excerpt":"Thoughts About Productivity Distrative Spot any steps in thw workflow that could easily distract from your work. For example, a developer might occarually run an end to end test. This e2e srcipts need few steps to complete.  install dependencies…","html":"<h1>Thoughts About Productivity</h1>\n<h2>Distrative</h2>\n<p>Spot any steps in thw workflow that could easily distract from your work. For example, a developer might occarually run an end to end test. This e2e srcipts need few steps to complete. </p>\n<ol>\n<li>install dependencies</li>\n<li>update webdriver</li>\n<li>start webdriver</li>\n<li>run the test scripts\nThe steps might look simple and easy to follow. But to an ordanary developer like myself, can only vaguely remember how to do this few weeks later. So what ends up is, I alwasy need to check the README or whatever that document the process. This is a distraction. A distraction will end up lots of mental cost, including context switching.\nA developer might developing a feature and just want to know wheather his code will pass the e2e tests, but now he has forced to switch context to learn how to run the tests again.\nIf these steps can be run in a single command, like <code class=\"language-text\">npm run e2e-test</code>, then it is a way better improvement in terms of distraction. A single command is way easy to remember than a sequnce of commands.</li>\n</ol>\n<p>Scripting all simple process if possible.</p>","id":"67c76856-a404-5e4e-9040-23878818d6fc","timeToRead":1,"frontmatter":{"date":"2018-08-08T22:38:22.164Z","path":"/thoughts-about-productivity","tags":["productivity"],"title":"Thoughts About Productivity"}}}}